# Set environment for processes
export TOMCAT_HOME=/Libary/Tomcat
export CATALINA_OPTS="-DJENKINS_HOME=~cgwong/.jenkins/ -Xmx512m"
export JAVA_8_HOME=$(/usr/libexec/java_home -v1.8)
export JAVA_HOME=${JAVA_8_HOME}

# Enable color in command line and 'less'
export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced

# Set Atlas access token
##export ATLAS_ACCESS_TOKEN=

# Set GitHub API Token for Brew
##export HOMEBREW_GITHUB_API_TOKEN=

# Set GitHub API Token for Vault
##export VAULT_AUTH_GITHUB_TOKEN=
##export VAULT_ADDR=

# Set default text editor to sublime
export EDITOR=/usr/local/bin/atom

# Avoid duplicates
export HISTCONTROL=ignoredups:erasedups

# After each command, append to the history file and reread it
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"

if [[ ${SHELL} == *"bash" ]]; then
  # Append to the Bash history file, rather than overwriting it
  shopt -s histappend

  # Autocorrect typos in path names when using `cd`
  shopt -s cdspell

  # Case-insensitive globbing (used in pathname expansion)
  shopt -s nocaseglob

  # Enable some Bash 4 features when possible:
  # * `autocd`, e.g. `**/qux` will enter `./foo/bar/baz/qux`
  # * Recursive globbing, e.g. `echo **/*.txt`
  for option in autocd globstar; do
    shopt -s "$option" 2> /dev/null
  done;
fi

## AWS
# Set environment for AWS access
export AWS_DEFAULT_REGION="us-east-1"
export AWS_CREDENTIAL_FILE=~/.aws/credentials

# AWS Account Manager
[[ -s ${HOME}/.awsam/bash.rc ]] && source ${HOME}/.awsam/bash.rc &>/dev/null

## Programming paths
# Go environment
export GOPATH=~/repos/gocode
export GOROOT=/usr/local/opt/go

# Python virtual environments
export WORKON_HOME=${HOME}/.virtualenvs
export PROJECT_HOME=${HOME}/repos/workspace
export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true"

# Link Brew Cask applications to normal location
export HOMEBREW_CASK_OPTS="--appdir=/Applications"

# Load Ruby's rbenv
if which rbenv > /dev/null; then
  eval "$(rbenv init -)"
fi

## TAB completion
# Load pyenv autocompletion
if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi
if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi

if [[ ${SHELL} == *"bash" ]]; then
  # Brew command completion
  [[ -f $(brew --prefix)/etc/bash_completion ]] && source $(brew --prefix)/etc/bash_completion

  # Brewed Bash command tab completion
  if which brew > /dev/null && [ -f "$(brew --prefix)/etc/bash_completion" ]; then
    source "$(brew --prefix)/etc/bash_completion"
  elif [ -f /etc/bash_completion ]; then
    source /etc/bash_completion
  fi

  # Enable tab completion for `g` by marking it as an alias for `git`
  if type _git &> /dev/null && [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then
    complete -o default -o nospace -F _git g
  fi

  # Add tab completion for `defaults read|write NSGlobalDomain`
  # You could just use `-g` instead, but I like being explicit
  complete -W "NSGlobalDomain" defaults;

  # Add `killall` tab completion for common apps
  complete -o "nospace" -W "Contacts Calendar Dock Finder Mail Safari iTunes SystemUIServer Terminal Twitter" killall;

  # Google Cloud shell command completion
  source '${HOME}/repos/workspace/gcloud/google-cloud-sdk/completion.bash.inc'
  # AWS shell command completion
  complete -C '/usr/local/bin/aws_completer' aws
  # kubectl completion
  source /usr/local/etc/bash_completion.d/kubectl
  # direnv execution
  eval "$(direnv hook bash)"
else
## Assume zsh
  # AWS shell command completion
  source /usr/local/bin/aws_zsh_completer.sh
  # kubectl completion
  source <(kubectl completion zsh)
  # direnv execution
  eval "$(direnv hook zsh)"
fi

