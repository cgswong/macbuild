#!/bin/bash
# Initialize macOS for daily use by installing specified tools, and updating configurations.

# Set values
SCRIPT_NAME=${0##*/}
SCRIPT_VERSION="2.0.0"
SCRIPT_REPO=${SCRIPT_REPO:-"https://github.com/cgswong/macbuild.git"}
SCRIPT_HOME=${SCRIPT_HOME:-"~/.macbuild"}
LOG_LEVEL=${LOG_LEVEL:-"INFO"}
LOG_FILE=${LOG_FILE:-"~/.macbuild/macbuild.log"}
OS_UPDATE_DIR="/Library/LaunchDaemons"
OS_UPDATE_FILE="homebrew.macbuild.brewupdate.plist"
PKG_FILE=${PKG_FILE:-"${SCRIPT_HOME}/packages.ini"}

# set colors
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
purple=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
reset=$(tput sgr0)

# Print messages to screen
log() {
  if [[ "${1}" == "DEBUG" ]]; then
    echo "$(date +"%F %T") [${SCRIPT_NAME}] ${2}" >>${LOG_FILE}
  elif [[ "${1}" == "FAIL" ]]; then
    echo "${red}$(date +"%F %T") ${2}${reset}"
  elif [[ "${1}" == "WARN" ]]; then
    echo "${yellow}$(date +"%F %T") ${2}${reset}"
  else
    echo "$(date +"%F %T") ${2}"
  fi
}

print_banner() {
  # Print banner
  echo "${green}                         _             _  _      _    ${reset}"
  echo "${green} _ __ ___    __ _   ___ | |__   _   _ (_)| |  __| |   ${reset}"
  echo "${green}| '_ \` _ \  / _\` | / __|| '_ \ | | | || || | / _\` |${reset}"
  echo "${green}| | | | | || (_| || (__ | |_) || |_| || || || (_| |   ${reset}"
  echo "${green}|_| |_| |_| \__,_| \___||_.__/  \__,_||_||_| \__,_|   ${reset} v${SCRIPT_VERSION}"
  echo ""
}

usage() {
  print_banner
  cat <<-DESC

---------------------

${SCRIPT_NAME} - Install tools and configure macOS.

Usage: ${SCRIPT_NAME} [options]

Options:
  -h, --help
      Output help (this message).

  --home=DIR
      Set as script home to locate installation files.

  --log-level=INFO|WARN|FAIL|DEBUG
      Set logging level to use.

  --repo=GITHUB_REPO_URL
      GitHub repository to use for remote configuration (default: ${SCRIPT_REPO}).
DESC
}

setup_bash_it() {
  # Get and configure bash-it, or update if already exists.
  if command -v bash-it &>/dev/null; then
    log $LOG_LEVEL "Updating bash-it..."
    bash-it update
    if [[ $? -eq 0 ]]; then
      log $LOG_LEVEL "Completed bash-it update!"
    else
      log WARN "Error updating bash-it!"
    fi
  else
    log $LOG_LEVEL "Installing bash-it..."
    git clone https://github.com/Bash-it/bash-it.git
    ~/.bash_it/install.sh --silent
    if [[ $? -eq 0 ]]; then
      log $LOG_LEVEL "Completed bash-it install!"
    else
      log $WARN "Error installing bash-it!"
    fi
  fi
}

install_homebrew() {
  # Install Homebrew
  if command -v brew &>/dev/null; then
    log $LOG_LEVEL "Upgrading Homebrew..."
    brew upgrade --quiet
    log $LOG_LEVEL "Completed Homebrew upgrade."
  else
    log $LOG_LEVEL "Installing Homebrew..."
    bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    log $LOG_LEVEL "Completed Homebrew install!"
  fi
}

setup_updating() {
  # Manage updates using `launchctl`
  log $LOG_LEVEL "Setting up launchctl..."
  if [[ -r "${OS_UPDATE_DIR}/${OS_UPDATE_FILE}" ]]; then
    if [[ -r "${SCRIPT_HOME}/files/${OS_UPDATE_FILE}" ]]; then
      sudo launchctl stop "${OS_UPDATE_FILE}"
      sudo launchctl unload "${OS_UPDATE_DIR}/${OS_UPDATE_FILE}"
    else
      log WARN "File not found! Unable to reload ${OS_UPDATE_FILE} for launchctl."
    fi
  fi
  if [[ -r "${SCRIPT_HOME}/files/${OS_UPDATE_FILE}" ]]; then
    cp "${SCRIPT_HOME}/files/${OS_UPDATE_FILE}" "${OS_UPDATE_DIR}/${OS_UPDATE_FILE}"
    sudo chmod 0644 "${OS_UPDATE_DIR}/${OS_UPDATE_FILE}"
    sudo chown root "${OS_UPDATE_DIR}/${OS_UPDATE_FILE}"
    sudo launchctl load "${OS_UPDATE_DIR}/${OS_UPDATE_FILE}"
    sudo launchctl start "${OS_UPDATE_FILE}"
    log $LOG_LEVEL "Completed launchctl setup!"
  else
    log WARN "File not found! Missing ${SCRIPT_HOME}/files/${OS_UPDATE_FILE} for launchctl."
  fi
}

install_cli_tools() {
  # Install XCode command line tools
  if [[ ! -f "/Library/Developer/CommandLineTools/usr/bin/clang" ]]; then
    log $LOG_LEVEL "Installing XCode command line tools..."
    xcode-select --install
    if [[ $? -eq 0 ]]; then
      log $LOG_LEVEL "Completed installing XCode command line tools!"
    else
      log WARN "Error installing XCode command line tools!"
    fi
  else
    log $LOG_LEVEL "Skipping XCode command line tools, already installed."
  fi
}

ini_parser() {
  # Parse ini file to retrieve the key under specific section
  cat ${PKG_FILE} | awk -v section="$1" -v key="$2" '
    BEGIN {
      if (length(key) > 0) { params=2 }
      else if (length(section) > 0) { params=1 }
      else { params=0 }
    }
    match($0,/#/) { next }
    match($0,/^\[(.+)\]$/){
      current=substr($0, RSTART+1, RLENGTH-2)
      found=current==section
      if (params==0) { print current }
    }
    match($0,/(.+)/) {
       if (found) {
         if (params==2 && key==$1) { print $3 }
         if (params==1) { printf "%s\n",$1 }
       }
    }'
}

install_python_tools() {
  # Install Python packages
  if command -v python3 &>/dev/null; then
    log $LOG_LEVEL "Installing pipx..."
    python3 -m pip install --upgrade pipx &>/dev/null
    if [[ $? -eq 0 ]]; then
      log $LOG_LEVEL "Completed pipx install!"
    else
      log WARN "Error during pipx install!"
    fi

    if [[ -r "${PKG_FILE}" ]]; then
      log $LOG_LEVEL "Installing Python packages..."
      for pkg in ini_parser 'pipx'; do
        pipx reinstall ${pkg}
      done
      log $LOG_LEVEL "Completed Python packages install!"
    else
      log WARN "File not found! Missing ${PKG_FILE} file."
    fi
  fi
}

install_homebrew_tools() {
  # Install Homebrew tools
  if [[ -r "${PKG_FILE}" ]]; then
    log $LOG_LEVEL "Installing Homebrew tools..."
    for pkg in ini_parser 'homebrew'; do
      brew install --quiet ${pkg}
    done
    log $LOG_LEVEL "Complete Homebrew tools install!"
  else
    log WARN "File not found! Missing ${PKG_FILE} file."
  fi
}

install_homebrew_apps() {
  # Install Homebrew (cask) apps
  if [[ -r "${PKG_FILE}" ]]; then
    log $LOG_LEVEL "Installing Homebrew apps..."
    for pkg in ini_parser 'cask'; do
      brew install --cask --quiet ${pkg}
    done
    log $LOG_LEVEL "Complete Homebrew apps install!"
  else
    log WARN "File not found! Missing ${PKG_FILE} file."
  fi
}

install_npm_tools() {
  # Install NPM packages
  if [[ -r "${PKG_FILE}" ]]; then
    log $LOG_LEVEL "Installing NPM tools..."
    for pkg in ini_parser 'npm'; do
      npm install --global ${pkg}
    done
    log $LOG_LEVEL "Complete NPM tools install!"
  else
    log WARN "File not found! Missing ${PKG_FILE} file."
  fi
}

main() {
  log $LOG_LEVEL "Setting up home directory..."
  mkdir -p ${SCRIPT_HOME}
  log $LOG_LEVEL "Checking for SUDO password..."
  sudo -v
  export BECOME_ASK_PASS=True

  log $LOG_LEVEL "Updating SUDO timestamp until we are finished..."
  while true; do
    sudo -n true
    sleep 60
    kill -0 "$$" || exit
  done 2>/dev/null &

  # Install XCode CLI Tools
  install_cli_tools

  # Install/Update Homebrew
  install_homebrew
  setup_updating

  # Install Python packages
  install_python_tools
  # Install Homebrew packages
  install_homebrew_tools
  install_homebrew_apps
  # Install NPM packages
  install_npm_tools
}

# Process command line
for arg in "$@"; do
  if test -n "$prev_arg"; then
    eval "$prev_arg=\$arg"
    prev_arg=
  fi

  case "$arg" in
  -*=*) optarg=$(echo "$arg" | sed 's/[-_a-zA-Z0-9]*=//') ;;
  *) optarg= ;;
  esac

  case $arg in
  -h | --help)
    usage && exit 0
    ;;
  --home=*)
    export SCRIPT_HOME="$optarg"
    ;;
  --log-level=*)
    export LOG_LEVEL="$optarg"
    ;;
  --repo=*)
    export SCRIPT_REPO="$optarg"
    ;;
  -*)
    log FAIL "Unknown option ${arg}, exiting."
    exit 1
    ;;
  *)
    log FAIL "Unknown option or missing argument for ${arg}, exiting."
    usage
    exit 1
    ;;
  esac
done

main
