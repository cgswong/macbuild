#!/usr/bin/env bash
# Initialize macOS for daily use by installing specified tools, and updating configurations.

# Set values
SCRIPT_NAME=${0##*/}
SCRIPT_VERSION="2.0.0"
SCRIPT_HOME=$(readlink -f ${0%%/*})
LOG_LEVEL=${LOG_LEVEL:-"INFO"}
LOG_FILE=${LOG_FILE:-"${SCRIPT_HOME}/logs/macbuild.log"}
OS_UPDATE_FILE="macbuild.update.agent.plist"
OS_UPDATE_FILE_PATH="/Library/LaunchAgents/${OS_UPDATE_FILE}"
OS_UPDATE_FILE_HOME="${SCRIPT_HOME}/../files/${OS_UPDATE_FILE}"
PKG_FILE=${PKG_FILE:-"${SCRIPT_HOME}/../files/packages.ini"}

# set colors
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
purple=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
reset=$(tput sgr0)

# Print messages to screen
log() {
  if [[ "${1}" == "DEBUG" ]]; then
    echo "$(date +"%F %T") [${SCRIPT_NAME}] ${2}" >>${LOG_FILE}
  elif [[ "${1}" == "FAIL" ]]; then
    echo "${red}$(date +"%F %T") ${2}${reset}"
  elif [[ "${1}" == "WARN" ]]; then
    echo "${yellow}$(date +"%F %T") ${2}${reset}"
  else
    echo "$(date +"%F %T") ${2}"
  fi
}

print_version() {
  # Print vesion
  cat <<-DESC
  ${SCRIPT_NAME} v${SCRIPT_VERSION}
DESC
}

usage() {
  cat <<-DESC
Install tools and configure macOS.

Usage: ${SCRIPT_NAME} [options]

Options:
  -h, --help
      Output help (this message).

  --version
      Show current version.

  --log-level=[INFO | WARN | FAIL | DEBUG]
      Set logging level to use.

  --update-only
      Update installed tooling only, no new installs.

  --install-only=[brew | apps | python | node]
      Install or reinstall the specified tools only.
DESC
}

setup_bash_it() {
  # Get and configure bash-it, or update if already exists.
  if command -v bash-it &>/dev/null; then
    log $LOG_LEVEL "Updating bash-it..."
    bash-it update
    if [[ $? -eq 0 ]]; then
      log $LOG_LEVEL "Completed bash-it update!"
    else
      log WARN "Error updating bash-it!"
    fi
  else
    log $LOG_LEVEL "Installing bash-it..."
    git clone https://github.com/Bash-it/bash-it.git
    ~/.bash_it/install.sh --silent
    if [[ $? -eq 0 ]]; then
      log $LOG_LEVEL "Completed bash-it install!"
    else
      log $WARN "Error installing bash-it!"
    fi
  fi
}

install_homebrew() {
  # Install Homebrew
  if command -v brew &>/dev/null; then
    log $LOG_LEVEL "Upgrading Homebrew..."
    brew upgrade --quiet
    log $LOG_LEVEL "Completed Homebrew upgrade."
  else
    log $LOG_LEVEL "Installing Homebrew..."
    bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    log $LOG_LEVEL "Completed Homebrew install!"
  fi
}

setup_updating() {
  # Manage updates using `launchctl`
  log $LOG_LEVEL "Setting up launchctl..."
  if [[ -r "${OS_UPDATE_FILE_PATH}" ]]; then
    if [[ -r "${OS_UPDATE_FILE_HOME}" ]]; then
      sudo launchctl stop "${OS_UPDATE_FILE}"
      sudo launchctl unload "${OS_UPDATE_FILE_PATH}"
    else
      log WARN "File not found! Unable to reload ${OS_UPDATE_FILE} for launchctl."
    fi
  fi
  if [[ -r "${OS_UPDATE_FILE_HOME}" ]]; then
    cp "${OS_UPDATE_FILE_HOME}" "${OS_UPDATE_FILE_PATH}"
    sudo chmod 0644 "${OS_UPDATE_FILE_PATH}"
    sudo chown root "${OS_UPDATE_FILE_PATH}"
    sudo launchctl load "${OS_UPDATE_FILE_PATH}"
    sudo launchctl start "${OS_UPDATE_FILE}"
    log $LOG_LEVEL "Completed launchctl setup!"
  else
    log WARN "File not found! Missing ${OS_UPDATE_FILE_HOME} for launchctl."
  fi
}

install_cli_tools() {
  # Install XCode command line tools
  if [[ ! -f "/Library/Developer/CommandLineTools/usr/bin/clang" ]]; then
    log $LOG_LEVEL "Installing XCode command line tools..."
    xcode-select --install
    if [[ $? -eq 0 ]]; then
      log $LOG_LEVEL "Completed installing XCode command line tools!"
    else
      log WARN "Error installing XCode command line tools!"
    fi
  else
    log $LOG_LEVEL "Skipping XCode command line tools, already installed."
  fi
}

ini_parser() {
  # Parse ini file to retrieve the key under specific section
  cat ${PKG_FILE} | awk -v section="$1" -v key="$2" '
    BEGIN {
      if (length(key) > 0) { params=2 }
      else if (length(section) > 0) { params=1 }
      else { params=0 }
    }
    match($0,/#/) { next }
    match($0,/^\[(.+)\]$/){
      current=substr($0, RSTART+1, RLENGTH-2)
      found=current==section
      if (params==0) { print current }
    }
    match($0,/(.+)/) {
       if (found) {
         if (params==2 && key==$1) { print $3 }
         if (params==1) { printf "%s\n",$1 }
       }
    }'
}

install_python_tools() {
  # Install Python packages
  if command -v pipx &>/dev/null; then
    if [[ -r "${PKG_FILE}" ]]; then
      log $LOG_LEVEL "Installing Python packages..."
      for pkg in ini_parser 'pipx'; do
        pipx reinstall ${pkg}
      done
      log $LOG_LEVEL "Completed Python packages install!"
    else
      log WARN "File not found! Missing ${PKG_FILE} file."
    fi
  else
    log WARN "Required pipx missing, skipping Python tools install."
  fi
}

install_homebrew_tools() {
  # Install Homebrew tools
  if command -v brew &>/dev/null; then
    if [[ -r "${PKG_FILE}" ]]; then
      log $LOG_LEVEL "Installing Homebrew tools..."
      for pkg in ini_parser 'homebrew'; do
        brew install --quiet ${pkg}
      done
      log $LOG_LEVEL "Complete Homebrew tools install!"
    else
      log WARN "File not found! Missing ${PKG_FILE} file."
    fi
  else
    log WARN "Required brew missing, skipping Homebrew tools install."
  fi
}

install_homebrew_apps() {
  # Install Homebrew (cask) apps
  if command -v brew &>/dev/null; then
    if [[ -r "${PKG_FILE}" ]]; then
      log $LOG_LEVEL "Installing Homebrew apps..."
      for pkg in ini_parser 'cask'; do
        brew install --cask --quiet ${pkg}
      done
      log $LOG_LEVEL "Complete Homebrew apps install!"
    else
      log WARN "File not found! Missing ${PKG_FILE} file."
    fi
  else
    log WARN "Required brew missing, skipping Homebrew apps install."
  fi
}

install_npm_tools() {
  # Install NPM packages
  if command -v npm &>/dev/null; then
    if [[ -r "${PKG_FILE}" ]]; then
      log $LOG_LEVEL "Installing NPM packages..."
      for pkg in ini_parser 'npm'; do
        npm install --global ${pkg}
      done
      log $LOG_LEVEL "Complete NPM packages install!"
    else
      log WARN "File not found! Missing ${PKG_FILE} file."
    fi
  else
    log WARN "Required npm missing, skipping Node JavaScript packages install."
  fi
}

update_tools() {
  # Update tools
  if command -v brew &>/dev/null; then
    log $LOG_LEVEL "Starting Homebrew tools update..."
    brew upgrade --quiet
  else
    log ERROR "Homebrew executable (brew) not found, update skipped."
  fi
  if command -v npm &>/dev/null; then
    log $LOG_LEVEL "Starting NPM tools update..."
    npm install npm --global --silent
    npm update --global --silent
  else
    log ERROR "NPM not found, update skipped."
  fi
  if command -v pipx &>/dev/null; then
    log $LOG_LEVEL "Starting Python tools update..."
    pipx upgrade-all
  else
    log ERROR "pipx not found, update skipped."
  fi
  log $LOG_LEVEL "Starting macOS update..."
  sudo softwareupdate --agree-to-license --install --all --restart
  log $LOG_LEVEL "Completed macOS update!"
}

main() {
  if [[ ! -d ${SCRIPT_HOME} ]]; then
    log $LOG_LEVEL "Setting up script directories..."
    mkdir -p ${SCRIPT_HOME}/{logs,files,bin}
  fi
  log $LOG_LEVEL "Checking for SUDO password..."
  sudo -v
  export BECOME_ASK_PASS=True

  log $LOG_LEVEL "Updating SUDO timestamp until we are finished..."
  while true; do
    sudo -n true
    sleep 60
    kill -0 "$$" || exit
  done 2>/dev/null &

  if [[ ${UPDATE_ONLY} == "yes" ]]; then
    log $LOG_LEVEL "Running updates only..."
    update_tools
    log $LOG_LEVEL "Completed updates!"
    exit
  fi

  # Install XCode CLI Tools
  install_cli_tools
  # Install/Update Homebrew
  install_homebrew
  setup_updating
  case $INSTALL_ONLY in
  "brew")
    # Install Homebrew packages
    install_homebrew_tools
    ;;
  "apps")
    # Install Homebrew Apps
    install_homebrew_apps
    ;;
  "python")
    # Install Python packages
    install_python_tools
    ;;
  "node")
    # Install NPM packages
    install_npm_tools
    ;;
  "*")
    # Install Python packages
    install_python_tools
    # Install Homebrew packages
    install_homebrew_tools
    install_homebrew_apps
    # Install NPM packages
    install_npm_tools
    ;;
  esac
}

# Process command line
for arg in "$@"; do
  if test -n "$prev_arg"; then
    eval "$prev_arg=\$arg"
    prev_arg=
  fi

  case "$arg" in
  -*=*) optarg=$(echo "$arg" | sed 's/[-_a-zA-Z0-9]*=//') ;;
  *) optarg= ;;
  esac

  case $arg in
  -h | --help)
    usage && exit 0
    ;;
  --version)
    print_version && exit 0
    ;;
  --log-level=*)
    export LOG_LEVEL="$optarg"
    ;;
  --update-only)
    export UPDATE_ONLY="yes"
    ;;
  --install-only=*)
    export INSTALL_ONLY="$optarg"
    ;;
  -*)
    log FAIL "Unknown option ${arg}, exiting."
    exit 1
    ;;
  *)
    log FAIL "Unknown option or missing argument for ${arg}, exiting."
    usage
    exit 1
    ;;
  esac
done

main
