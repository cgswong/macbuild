#!/bin/bash
# Initialize macOS for daily use by installing specified tools, and updating configurations.

# Set values
SCRIPT_NAME=${0##*/}
MACBUILD_VERSION="1.0.0"
MACBUILD_REPO=${MACBUILD_REPO:-"https://github.com/cgswong/macbuild.git"}
MACBUILD_HOME=${MACBUILD_HOME:-"~/.macbuild"}
MACBUILD_LOG_LEVEL=${MACBUILD_LOG_LEVEL:-"INFO"}
MACBUILD_LOG_FILE=${MACBUILD_LOG_FILE:-"~/.macbuild/macbuild.log"}
MACBUILD_UPDATE_FILE="homebrew.macbuild.brewupdate.plist"
OS_UPDATE_DIR="/Library/LaunchDaemons"

# set colors
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
purple=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
reset=$(tput sgr0)

# Print messages to screen
log() {
  if [[ "${1}" == "DEBUG" ]]; then
    echo "$(date +"%F %T") [${SCRIPT_NAME}] ${2}" >>${MACBUILD_LOG_FILE}
  elif [[ "${1}" == "FAIL" ]]; then
    echo "${red}$(date +"%F %T") ${2}${reset}"
  else
    echo "$(date +"%F %T") ${2}"
  fi
}

# Print banner
print_banner() {
  echo "${green}                         _             _  _      _    ${reset}"
  echo "${green} _ __ ___    __ _   ___ | |__   _   _ (_)| |  __| |   ${reset}"
  echo "${green}| '_ \` _ \  / _\` | / __|| '_ \ | | | || || | / _\` |${reset}"
  echo "${green}| | | | | || (_| || (__ | |_) || |_| || || || (_| |   ${reset}"
  echo "${green}|_| |_| |_| \__,_| \___||_.__/  \__,_||_||_| \__,_|   ${reset} v${MACBUILD_VERSION}"
  echo ""
}

usage() {
  print_banner
  cat <<-EOM

---------------------

${SCRIPT_NAME} - Install tools and configure macOS computer.

Usage: ${SCRIPT_NAME} [options]

Options:
  -h, --help
      Output help (this message)

  -i, --install
      Install ${SCRIPT_NAME} only.

  -r=, --repo=[github_repo]
      GitHub repository to use for remote configuration (defaults to ${MACBUILD_REPO}).

  -t=, --tags=[ansible tags]
      Comma separated list of tags to use for filtering setup. Valid tags are:

      - dotfiles
      - extra-packages
      - homebrew
      - mas
      - osx
EOM
}

main() {
  mkdir -p ${MACBUILD_HOME}
  log DEBUG "Checking if we need to ask for a password to use SUDO."
  sudo -v
  export BECOME_ASK_PASS=True

  log DEBUG "Keep-alive: Updating existing SUDO time stamp until we are finished."
  while true; do
    sudo -n true
    sleep 60
    kill -0 "$$" || exit
  done 2>/dev/null &

  export HOMEBREW_CASK_OPTS="--appdir=/Applications"

  # Install XCode command line tools
  if [[ ! -f "/Library/Developer/CommandLineTools/usr/bin/clang" ]]; then
    log INFO "Installing XCode command line tools."
    xcode-select --install
  fi

  # Install Python packages
  if command -V python3 &>/dev/null; then
    log INFO "Installing pipx and Python packages."
    python3 -m pip install --upgrade pipx
    if [[ -r ${MACBUILD_HOME}/pipx_packages.lst ]]; then
      for pkg in $(cat ${MACBUILD_HOME}/pipx_packages.lst); do
        pipx install ${pkg}
      done
    fi
  fi

  # Install Homebrew
  if ! command -V brew &>/dev/null; then
    log INFO "Installing Homebrew <https://brew.sh/>."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    if [[ ! -f ${OS_UPDATE_DIR}/${MACBUILD_UPDATE_FILE} ]]; then
      log INFO "Setting up Homebrew auto-update using Launchd"
      cp ${MACBUILD_HOME}/${MACBUILD_UPDATE_FILE} ${OS_UPDATE_DIR}/
      sudo chmod 0644 ${OS_UPDATE_DIR}/${MACBUILD_UPDATE_FILE}
      sudo chown root ${OS_UPDATE_DIR}/${MACBUILD_UPDATE_FILE}
      sudo launchctl unload ${OS_UPDATE_DIR}/${MACBUILD_UPDATE_FILE} && sudo launchctl load ${OS_UPDATE_DIR}/${MACBUILD_UPDATE_FILE}
      sudo launchctl stop ${MACBUILD_UPDATE_FILE} && sudo launchctl start ${MACBUILD_UPDATE_FILE}
    fi
  fi

  # Install Homebrew packages
  if [[ -r ${MACBUILD_HOME}/brew_packages.lst ]]; then
    log INFO "Installing Homebrew packages."
    for pkg in $(cat ${MACBUILD_HOME}/brew_packages.lst); do
      brew install ${pkg}
    done
  fi
  if [[ -r ${MACBUILD_HOME}/cask_packages.lst ]]; then
    log INFO "Installing Homebrew Cask packages."
    for pkg in $(cat ${MACBUILD_HOME}/cask_packages.lst); do
      brew install ${pkg}
    done
  fi

  # Install NPM packages
  if [[ -d ${MACBUILD_HOME}/npm_packages.lst ]]; then
    log INFO "Installing NPM packages."
    for pkg in $(cat ${MACBUILD_HOME}/npm_packages.lst); do
      npm install --global ${pkg}
    done
  fi
}

# Process command line
for arg in "$@"; do
  if test -n "$prev_arg"; then
    eval "$prev_arg=\$arg"
    prev_arg=
  fi

  case "$arg" in
  -*=*) optarg=$(echo "$arg" | sed 's/[-_a-zA-Z0-9]*=//') ;;
  *) optarg= ;;
  esac

  case $arg in
  -h | --help)
    usage && exit 0
    ;;
  -i | --install)
    MB_INSTALL="yes"
    ;;
  -h=* | --home=*)
    MACBUILD_HOME="$optarg"
    ;;
  -l=* | --log-level=*)
    MACBUILD_LOG_LEVEL="$optarg"
    ;;
  -r=* | --repo=*)
    MACBUILD_REPO="$optarg"
    ;;
  -t=* | --tags=*)
    ANSIBLE_TAGS="$optarg"
    ;;
  -*)
    log ERROR "${red}Unknown option ${arg}, exit.${reset}"
    exit 1
    ;;
  *)
    log "${red}Unknown option or missing argument for ${arg}, exit.${reset}"
    usage
    exit 1
    ;;
  esac
done

main
